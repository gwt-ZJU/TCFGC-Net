import os
import torch
from torch import nn
from torch.autograd import Variable
import math
def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor

class ConvGRUCell(nn.Module):
    def __init__(self,  input_dim, hidden_dim, kernel_size, bias,CA_FLAG=True):
        """
        Initialize the ConvLSTM cell
        :param input_size: (int, int)
            Height and width of input tensor as (height, width).
        :param input_dim: int
            Number of channels of input tensor.
        :param hidden_dim: int
            Number of channels of hidden state.
        :param kernel_size: (int, int)
            Size of the convolutional kernel.
        :param bias: bool
            Whether or not to add the bias.
        :param dtype: torch.cuda.FloatTensor or torch.FloatTensor
            Whether or not to use cuda.
        """
        super(ConvGRUCell, self).__init__()
        self.padding = kernel_size[0] // 2, kernel_size[1] // 2
        self.hidden_dim = hidden_dim
        self.bias = bias
        self.CA_FLAG = CA_FLAG

        self.conv_gates = nn.Conv2d(in_channels=input_dim + hidden_dim,
                                    out_channels=2*self.hidden_dim,  # for update_gate,reset_gate respectively
                                    kernel_size=kernel_size,
                                    padding=self.padding,
                                    bias=self.bias)

        self.conv_can = nn.Conv2d(in_channels=input_dim+hidden_dim,
                              out_channels=self.hidden_dim, # for candidate neural memory
                              kernel_size=kernel_size,
                              padding=self.padding,
                              bias=self.bias)
        if self.CA_FLAG:
            self.CA = CA(in_channel=input_dim)

    def init_hidden(self, b, h, w):
        return (Variable(torch.zeros(b, self.hidden_dim, h, w)).cuda())

    def forward(self, input_tensor, h_cur):
        """

        :param self:
        :param input_tensor: (b, c, h, w)
            input is actually the target_model
        :param h_cur: (b, c_hidden, h, w)
            current hidden and cell states respectively
        :return: h_next,
            next hidden state
        """
        if self.CA_FLAG:
            input_tensor = self.CA(input_tensor, h_cur)
        combined = torch.cat([input_tensor, h_cur], dim=1)
        combined_conv = self.conv_gates(combined)

        gamma, beta = torch.split(combined_conv, self.hidden_dim, dim=1)
        reset_gate = torch.sigmoid(gamma)
        update_gate = torch.sigmoid(beta)

        combined = torch.cat([input_tensor, reset_gate*h_cur], dim=1)
        cc_cnm = self.conv_can(combined)
        cnm = torch.tanh(cc_cnm)

        h_next = (1 - update_gate) * h_cur + update_gate * cnm
        return h_next

def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    r"""
    Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

class CA(nn.Module):
    def __init__(self, in_channel, reduction=16):
        super(CA, self).__init__()
        """
        这是通道和空间
        """
        self.inchannel = in_channel
        self.hidden_inchannel = int(self.inchannel / reduction)

        self.CA = nn.Sequential(
            nn.AdaptiveAvgPool2d(1),
            nn.Flatten(),
            nn.Linear(in_features=self.inchannel, out_features=self.hidden_inchannel, bias=False),
            nn.ReLU(),
            nn.Linear(self.hidden_inchannel, self.inchannel, bias=False),
        )

        self.SA_conv = nn.Conv2d(2, 1, kernel_size=1)
        """
        这是融合后通道和空间
        """
        self.channel_fc = nn.Linear(in_features=self.inchannel * 2, out_features=self.inchannel, bias=False)
        self.spatial_conv = nn.Conv2d(2, 1, kernel_size=3, padding=1)
        self.sigmoid = nn.Sigmoid()
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        elif isinstance(m, nn.Conv2d):
            fan_out = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
            fan_out //= m.groups
            m.weight.data.normal_(0, math.sqrt(2.0 / fan_out))
            if m.bias is not None:
                m.bias.data.zero_()

    def forward(self, current_feature, his_feature):
        """
        :param current_feature:
        :param his_feature:
        :return:
        """
        """
        历史数据的部分
        """
        his_ca = self.CA(his_feature)
        his_max, _ = torch.max(his_feature, dim=1, keepdim=True)
        his_avg = torch.mean(his_feature, dim=1, keepdim=True)
        his_max_avg = torch.cat([his_avg, his_max], dim=1)
        his_sa = self.SA_conv(his_max_avg)
        """
        当前数据的部分
        """
        current_ca = self.CA(current_feature)
        current_max, _ = torch.max(current_feature, dim=1, keepdim=True)
        current_avg = torch.mean(current_feature, dim=1, keepdim=True)
        current_max_avg = torch.cat([current_avg, current_max], dim=1)
        current_sa = self.SA_conv(current_max_avg)
        """
        历史数据和当前数据的融合
        """
        ca_feature = torch.cat([his_ca, current_ca], dim=1)
        sa_feature = torch.cat([his_sa, current_sa], dim=1)
        ca_feature = self.channel_fc(ca_feature).unsqueeze(-1).unsqueeze(-1).expand_as(current_feature)
        sa_feature = self.spatial_conv(sa_feature)
        ca_feature = self.sigmoid(ca_feature)
        sa_feature = self.sigmoid(sa_feature)

        output = current_feature * ca_feature * sa_feature + current_feature



        # weight = self.sigmoid(ca_feature + sa_feature)
        # """
        # 得到最后的特征
        # """
        # output = (1 + weight) * current_feature

        return output

class Conv_GRU(nn.Module):
    def __init__(self, input_dim, hidden_dim, kernel_size, num_layers,
                batch_first=False, bias=True, return_all_layers=False,CA_FLAG=True):
        """

        :param input_size: (int, int)
            Height and width of input tensor as (height, width).
        :param input_dim: int e.g. 256
            Number of channels of input tensor.
        :param hidden_dim: int e.g. 1024
            Number of channels of hidden state.
        :param kernel_size: (int, int)
            Size of the convolutional kernel.
        :param num_layers: int
            Number of ConvLSTM layers
        :param dtype: torch.cuda.FloatTensor or torch.FloatTensor
            Whether or not to use cuda.
        :param alexnet_path: str
            pretrained alexnet parameters
        :param batch_first: bool
            if the first position of array is batch or not
        :param bias: bool
            Whether or not to add the bias.
        :param return_all_layers: bool
            if return hidden and cell states for all layers
        """
        super(Conv_GRU, self).__init__()

        # Make sure that both `kernel_size` and `hidden_dim` are lists having len == num_layers
        kernel_size = self._extend_for_multilayer(kernel_size, num_layers)
        hidden_dim  = self._extend_for_multilayer(hidden_dim, num_layers)
        if not len(kernel_size) == len(hidden_dim) == num_layers:
            raise ValueError('Inconsistent list length.')

        self.input_dim = input_dim
        self.hidden_dim = hidden_dim
        self.kernel_size = kernel_size
        self.num_layers = num_layers
        self.batch_first = batch_first
        self.bias = bias
        self.return_all_layers = return_all_layers

        cell_list = []
        for i in range(0, self.num_layers):
            cur_input_dim = input_dim if i == 0 else hidden_dim[i - 1]
            cell_list.append(ConvGRUCell(
                                         input_dim=cur_input_dim,
                                         hidden_dim=self.hidden_dim[i],
                                         kernel_size=self.kernel_size[i],
                                         bias=self.bias,
                                         CA_FLAG = CA_FLAG))

        # convert python list to pytorch module
        self.cell_list = nn.ModuleList(cell_list)

    def forward(self, input_tensor, hidden_state=None):
        """

        :param input_tensor: (b, t, c, h, w) or (t,b,c,h,w) depends on if batch first or not
            extracted features from alexnet
        :param hidden_state:
        :return: layer_output_list, last_state_list
        """
        if not self.batch_first:
            # (t, b, c, h, w) -> (b, t, c, h, w)
            input_tensor = input_tensor.permute(1, 0, 2, 3, 4)

        # Implement stateful ConvLSTM
        if hidden_state is not None:
            raise NotImplementedError()
        else:
            b, _, _, h, w = input_tensor.shape
            hidden_state = self._init_hidden(b, h, w)

        layer_output_list = []
        last_state_list   = []

        seq_len = input_tensor.size(1)
        cur_layer_input = input_tensor

        for layer_idx in range(self.num_layers):
            h = hidden_state[layer_idx]
            output_inner = []
            for t in range(seq_len):
                # input current hidden and cell state then compute the next hidden and cell state through ConvLSTMCell forward function
                h = self.cell_list[layer_idx](input_tensor=cur_layer_input[:, t, :, :, :], # (b,t,c,h,w)
                                              h_cur=h)
                output_inner.append(h)

            layer_output = torch.stack(output_inner, dim=1)
            cur_layer_input = layer_output

            layer_output_list.append(layer_output)
            last_state_list.append([h])

        if not self.return_all_layers:
            layer_output_list = layer_output_list[-1:]
            last_state_list   = last_state_list[-1:]

        return layer_output_list, last_state_list

    def _init_hidden(self, b, h, w):
        init_states = []
        for i in range(self.num_layers):
            init_states.append(self.cell_list[i].init_hidden(b, h, w))
        return init_states

    @staticmethod
    def _check_kernel_size_consistency(kernel_size):
        if not (isinstance(kernel_size, tuple) or
                    (isinstance(kernel_size, list) and all([isinstance(elem, tuple) for elem in kernel_size]))):
            raise ValueError('`kernel_size` must be tuple or list of tuples')

    @staticmethod
    def _extend_for_multilayer(param, num_layers):
        if not isinstance(param, list):
            param = [param] * num_layers
        return param

class ConvGRU(nn.Module):
    def __init__(self, in_channels, hidden_channels,
                 kernel_size, num_layers, bias=True, batch_first=False,RNN_type='ConvGRU',CA_FLAG = True):
        super(ConvGRU, self).__init__()
        self.RNN_type = RNN_type
        if self.RNN_type == 'ConvGRU':
            self.forward_net = Conv_GRU(input_dim=in_channels, hidden_dim=hidden_channels, kernel_size=kernel_size,
                                        num_layers=num_layers, batch_first=batch_first, bias=bias,CA_FLAG=CA_FLAG)
        if self.RNN_type == 'ConvBiGRU':
            self.forward_net = Conv_GRU(in_channels, hidden_channels, kernel_size,
                                         num_layers, batch_first=batch_first, bias=bias,CA_FLAG=CA_FLAG)
            self.reverse_net = Conv_GRU(in_channels, hidden_channels, kernel_size,
                                        num_layers, batch_first=batch_first, bias=bias,CA_FLAG=CA_FLAG)

    def forward(self, xforward, xreverse):
        """
        xforward, xreverse = B T C H W tensors.
        """
        if self.RNN_type == 'ConvGRU':
            y_out_fwd, _ = self.forward_net(xforward)
            y_out_fwd = y_out_fwd[-1]
            ycat = y_out_fwd
        if self.RNN_type == 'ConvBiGRU':
            y_out_fwd, _ = self.forward_net(xforward)
            y_out_rev, _ = self.reverse_net(xreverse)
            y_out_fwd = y_out_fwd[-1]  # outputs of last CLSTM layer = B, T, C, H, W
            y_out_rev = y_out_rev[-1]  # outputs of last CLSTM layer = B, T, C, H, W
            reversed_idx = list(reversed(range(y_out_rev.shape[1])))
            y_out_rev = y_out_rev[:, reversed_idx, ...]  # reverse temporal outputs.
            ycat = torch.cat((y_out_fwd, y_out_rev), dim=2)
        return ycat


if __name__ == '__main__':
    # set CUDA device
    # os.environ["CUDA_VISIBLE_DEVICES"] = "3"

    # detect if CUDA is available or not
    # use_gpu = torch.cuda.is_available()
    # if use_gpu:
    #     dtype = torch.cuda.FloatTensor # computation in GPU
    # else:
    #     dtype = torch.FloatTensor

    height = width = 6
    channels = 192
    hidden_dim = [192]
    kernel_size = (3,3) # kernel size for two stacked hidden layer
    num_layers = 1 # number of stacked hidden layer
    model = ConvGRU(in_channels=channels,
                    hidden_channels=hidden_dim,
                    kernel_size=kernel_size,
                    num_layers=num_layers,
                    batch_first=True,
                    bias = True,
                    RNN_type='ConvGRU',
                    CA_FLAG = False).cuda()

    batch_size = 8
    time_steps = 4
    input_tensor = torch.rand(batch_size, time_steps, channels, height, width).cuda()  # (b,t,c,h,w)
    layer_output_list, last_state_list = model(input_tensor,input_tensor)
    pass